name: Build and Push Container Image

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'exercises/exercise1/**'
      - 'exercises/exercise4/**'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'exercises/exercise1/**'
      - 'exercises/exercise4/**'
  workflow_dispatch:
    inputs:
      exercise:
        description: 'Exercise to build (exercise1 or exercise4)'
        required: true
        default: 'exercise1'
        type: choice
        options:
          - exercise1
          - exercise4

env:
  AWS_REGION: us-east-1  # <REPLACE: Set your AWS region>
  ECR_REPOSITORY: devops-demo-app  # <REPLACE: Set your ECR repository name>
  IMAGE_TAG: ${{ github.sha }}

# Use OIDC for AWS authentication (no long-lived credentials)
permissions:
  id-token: write
  contents: read

jobs:
  test-application:
    name: Test Application Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          cd exercises/exercise1
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 bandit pylint

      - name: Lint Python Code with flake8
        run: |
          cd exercises/exercise1
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Security Analysis with Bandit
        run: |
          cd exercises/exercise1
          # Run bandit security scanner
          bandit -r app/ -f json -o bandit-report.json || true
          # Display results
          bandit -r app/ || true
        continue-on-error: true

      - name: Test Application Startup
        run: |
          cd exercises/exercise1
          # Start application in background
          timeout 30s python -m app.main &
          APP_PID=$!
          
          # Wait for application to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1
          
          # Stop application
          kill $APP_PID || true
        timeout-minutes: 2

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test-application
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<REPLACE_AWS_ACCOUNT_ID>:role/GitHubActionsECRPushRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsECRPush

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine Build Context
        id: build-context
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            EXERCISE="${{ github.event.inputs.exercise }}"
          else
            # Detect which exercise was modified
            if git diff --name-only HEAD~1 HEAD | grep -q "exercises/exercise4"; then
              EXERCISE="exercise4"
            else
              EXERCISE="exercise1"
            fi
          fi
          echo "exercise=$EXERCISE" >> $GITHUB_OUTPUT
          echo "Building from exercises/$EXERCISE"

      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}

      - name: Build Container Image
        uses: docker/build-push-action@v5
        with:
          context: ./exercises/${{ steps.build-context.outputs.exercise }}
          file: ./exercises/${{ steps.build-context.outputs.exercise }}/Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Container Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Display Trivy Scan Summary
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --severity HIGH,CRITICAL \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        continue-on-error: true

      - name: Push Image to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./exercises/${{ steps.build-context.outputs.exercise }}
          file: ./exercises/${{ steps.build-context.outputs.exercise }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Display Image Information
        run: |
          echo "### Container Image Published :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** ${{ steps.build-push.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Context:** exercises/${{ steps.build-context.outputs.exercise }}" >> $GITHUB_STEP_SUMMARY

  scan-results-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    
    steps:
      - name: Create Security Summary
        run: |
          echo "### Security Scan Results :shield:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scanning completed. Review Trivy scan output above for vulnerability details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Critical Findings:** Review the Trivy output for CRITICAL severity issues" >> $GITHUB_STEP_SUMMARY
          echo "**High Findings:** Review the Trivy output for HIGH severity issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo ":warning: **Note:** Address all CRITICAL and HIGH vulnerabilities before production deployment" >> $GITHUB_STEP_SUMMARY